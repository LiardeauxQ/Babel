



Network Working Group                                         A. Fourcat
Internet-Draft                                               T. Nicollet
Intended status: Informational                                L. Quentin
Expires: April 7, 2020                                         P. Kilian
                                                                Epitech.
                                                        October 05, 2019


                    The Babel Client-Server protocol
                               RFC draft

Abstract

   The RFC is written for the Babel project.  It will present the binary
   protocol written to sustain the clients of the Babel software.

   The Babel is a multi-platform (Windows, Linux, MacOs) VOIP software.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 7, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Fourcat, et al.           Expires April 7, 2020                 [Page 1]

Internet-Draft                     I-D                      October 2019


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Client requests . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Server based request  . . . . . . . . . . . . . . . . . .   3
       2.1.1.  CLIENT_PING . . . . . . . . . . . . . . . . . . . . .   3
       2.1.2.  CLIENT_HELLO  . . . . . . . . . . . . . . . . . . . .   3
       2.1.3.  CLIENT_GOODBYE  . . . . . . . . . . . . . . . . . . .   4
       2.1.4.  CLIENT_FRIEND_STATUS  . . . . . . . . . . . . . . . .   4
       2.1.5.  CLIENT_REGISTER . . . . . . . . . . . . . . . . . . .   4
     2.2.  Server proxy request  . . . . . . . . . . . . . . . . . .   4
       2.2.1.  CLIENT_FRIEND_REQUEST . . . . . . . . . . . . . . . .   4
       2.2.2.  CLIENT_CALL . . . . . . . . . . . . . . . . . . . . .   4
       2.2.3.  CLIENT_BYE  . . . . . . . . . . . . . . . . . . . . .   5
       2.2.4.  CLIENT_ACCEPT_FRIEND  . . . . . . . . . . . . . . . .   5
       2.2.5.  CLIENT_ACCEPT_CALL  . . . . . . . . . . . . . . . . .   5
   3.  Server requests . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  *_RESPONSE  . . . . . . . . . . . . . . . . . . . . . . .   5
     3.2.  * . . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   4.  Normative References  . . . . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   The binary protocol use a versioning system based on ??? versioning.
   The binary protocol permit transfer of instruction and is hardly
   typed.

   (The response are structure based on request etc...)

   Each request contain an header.

   Under this form.

   o  int id

   o  size_t payload_len

   The MSB is encoded with 1 for Server's requests and 0 for Client's
   requests.







Fourcat, et al.           Expires April 7, 2020                 [Page 2]

Internet-Draft                     I-D                      October 2019


1.1.  Terminology

   We need you to understand the concepts of "SOCKET", "PORT", "USER",
   "DATABASE" The project will be done with C like struct and types.

   USERNAME_SIZE: tell to the protocol's users the max size of the
   username.

   PASSWORD_SIZE: tell to the protocol's users the max size of the
   password.

   MAX_USER_IN_CALL: tell to the protocol's users the max user in a VOIP
   conversation.

   MSB: Most significant bit.

2.  Client requests

   The client can connect to the server, register and do lot's of
   actions during the runtime.

2.1.  Server based request

2.1.1.  CLIENT_PING

   Ping the server to check connection and latency.

   Content:

   o  time_t stamp

   Response: SERVER_PING_RESPONSE

2.1.2.  CLIENT_HELLO

   This is the login request.  When the connection is established it
   should be the first request made from the client.

   Content:

   o  char username[USERNAME_SIZE]

   o  char password[PASSWORD_SIZE]

   Response: SERVER_HELLO_RESPONSE






Fourcat, et al.           Expires April 7, 2020                 [Page 3]

Internet-Draft                     I-D                      October 2019


2.1.3.  CLIENT_GOODBYE

   This is the request to close the connection to the server from the
   client.

   Content: EMPTY

   Response: SERVER_GOODBYE_RESPONSE

2.1.4.  CLIENT_FRIEND_STATUS

   Request for the status (Connected, InCall etc...) of the user
   friends.

   Content: EMPTY

   Response: SERVER_FRIEND_STATUS_RESPONSE

2.1.5.  CLIENT_REGISTER

   Request to register client with username and password into the server
   database.

   Content:

   o  char username[USERNAME_LEN]

   o  char password[PASSWORD_LEN]

   Response: SERVER_REGISTER_RESPONSE

2.2.  Server proxy request

2.2.1.  CLIENT_FRIEND_REQUEST

   Send a friend request to the user given in payload.

   Content:

   o  char username[USERNAME_LEN]

   Response: SERVER_FRIEND_REQUEST_RESPONSE

2.2.2.  CLIENT_CALL

   Request to begin a data transfer through client.

   Content:



Fourcat, et al.           Expires April 7, 2020                 [Page 4]

Internet-Draft                     I-D                      October 2019


   o  char username[MAX_USER_IN_CALL][USERNAME_LEN]

   o  short port

   o  char ip[16]

   Response: SERVER_CALL_RESPONSE

2.2.3.  CLIENT_BYE

   Request to close the running VOIP conversation.

   Content: EMPTY

   Response: SERVER_BYE_RESPONSE

2.2.4.  CLIENT_ACCEPT_FRIEND

   Accept friend requested from CLIENT_FRIEND_REQUEST.

   Content:

   o  char message[MESSAGE_LEN]

   Response: SERVER_ACCEPT_FRIEND_RESPONSE

2.2.5.  CLIENT_ACCEPT_CALL

   Accept call requested from CLIENT_CALL.

   Content: * char username[USERNAME_LEN] * short port * char ip[16]

   Response: SERVER_ACCEPT_CALL_RESPONSE

3.  Server requests

3.1.  *_RESPONSE

   All the previous client request responses.

   result is an int that can contain either OK or KO.

   Content:

   o  int result

   Response: EMPTY




Fourcat, et al.           Expires April 7, 2020                 [Page 5]

Internet-Draft                     I-D                      October 2019


3.2.  *

   In other case the server just forward and make safe ans possibility
   check as a proxy.

   Content:

   o  Same as client's requests.

   Response: EMPTY

4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

Authors' Addresses

   Alexandre Fourcat
   Epitech.

   Email: alexandre.fourcat@epitech.eu


   Thomas Nicollet
   Epitech.

   Email: thomas.nicollet@epitech.eu


   Quentin Liardeaux
   Epitech.

   Email: quentin.liardeaux@epitech.eu


   Kilian Perrier
   Epitech.

   Email: kilian.perrier@epitech.eu











Fourcat, et al.           Expires April 7, 2020                 [Page 6]
