

include(FindPackageHandleStandardArgs)

message(STATUS "Conan: Using autogenerated Findsqlite3.cmake")
# Global approach
set(sqlite3_FOUND 1)
set(sqlite3_VERSION "3.29.0")

find_package_handle_standard_args(sqlite3 REQUIRED_VARS sqlite3_VERSION VERSION_VAR sqlite3_VERSION)
mark_as_advanced(sqlite3_FOUND sqlite3_VERSION)



set(sqlite3_INCLUDE_DIRS "/home/alex/.conan/data/sqlite3/3.29.0/bincrafters/stable/package/6745b2c67ece017487d93454786f9082519559e7/include")
set(sqlite3_INCLUDES "/home/alex/.conan/data/sqlite3/3.29.0/bincrafters/stable/package/6745b2c67ece017487d93454786f9082519559e7/include")
set(sqlite3_DEFINITIONS )
set(sqlite3_LINKER_FLAGS_LIST "" "")
set(sqlite3_COMPILE_DEFINITIONS )
set(sqlite3_COMPILE_OPTIONS_LIST "" "")
set(sqlite3_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(sqlite3_LIBRARIES "") # Will be filled later
set(sqlite3_LIBS "") # Same as sqlite3_LIBRARIES

mark_as_advanced(sqlite3_INCLUDE_DIRS
                 sqlite3_INCLUDES
                 sqlite3_DEFINITIONS
                 sqlite3_LINKER_FLAGS_LIST
                 sqlite3_COMPILE_DEFINITIONS
                 sqlite3_COMPILE_OPTIONS_LIST
                 sqlite3_LIBRARIES
                 sqlite3_LIBS
                 sqlite3_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to sqlite3_LIBS and sqlite3_LIBRARY_LIST
set(sqlite3_LIBRARY_LIST sqlite3 pthread dl)
set(sqlite3_LIB_DIRS "/home/alex/.conan/data/sqlite3/3.29.0/bincrafters/stable/package/6745b2c67ece017487d93454786f9082519559e7/lib")
foreach(_LIBRARY_NAME ${sqlite3_LIBRARY_LIST})
    unset(CONAN_FOUND_LIBRARY CACHE)
    find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${sqlite3_LIB_DIRS}
                 NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(CONAN_FOUND_LIBRARY)
        list(APPEND sqlite3_LIBRARIES ${CONAN_FOUND_LIBRARY})
        if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
            # Create a micro-target for each lib/a found
            set(_LIB_NAME CONAN_LIB::sqlite3_${_LIBRARY_NAME})
            if(NOT TARGET ${_LIB_NAME})
                # Create a micro-target for each lib/a found
                add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
            else()
                message(STATUS "Skipping already existing target: ${_LIB_NAME}")
            endif()
            list(APPEND sqlite3_LIBRARIES_TARGETS ${_LIB_NAME})
        endif()
        message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
    else()
        message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
        list(APPEND sqlite3_LIBRARIES_TARGETS ${_LIBRARY_NAME})
        list(APPEND sqlite3_LIBRARIES ${_LIBRARY_NAME})
    endif()
endforeach()
set(sqlite3_LIBS ${sqlite3_LIBRARIES})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET sqlite3::sqlite3)
        add_library(sqlite3::sqlite3 INTERFACE IMPORTED)
        
    if(sqlite3_INCLUDE_DIRS)
      set_target_properties(sqlite3::sqlite3 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${sqlite3_INCLUDE_DIRS}")
    endif()
    set_property(TARGET sqlite3::sqlite3 PROPERTY INTERFACE_LINK_LIBRARIES ${sqlite3_LIBRARIES_TARGETS} "${sqlite3_LINKER_FLAGS_LIST}")
    set_property(TARGET sqlite3::sqlite3 PROPERTY INTERFACE_COMPILE_DEFINITIONS ${sqlite3_COMPILE_DEFINITIONS})
    set_property(TARGET sqlite3::sqlite3 PROPERTY INTERFACE_COMPILE_OPTIONS "${sqlite3_COMPILE_OPTIONS_LIST}")

        
    endif()
endif()
