

include(FindPackageHandleStandardArgs)

message(STATUS "Conan: Using autogenerated Findboost.cmake")
# Global approach
set(boost_FOUND 1)
set(boost_VERSION "1.69.0")

find_package_handle_standard_args(boost REQUIRED_VARS boost_VERSION VERSION_VAR boost_VERSION)
mark_as_advanced(boost_FOUND boost_VERSION)



set(boost_INCLUDE_DIRS "/home/alex/.conan/data/boost/1.69.0/conan/stable/package/8915d64f08339c2b87440ecfa3ccd7cb2da2edf1/include")
set(boost_INCLUDES "/home/alex/.conan/data/boost/1.69.0/conan/stable/package/8915d64f08339c2b87440ecfa3ccd7cb2da2edf1/include")
set(boost_DEFINITIONS "-DBOOST_USE_STATIC_LIBS")
set(boost_LINKER_FLAGS_LIST "" "")
set(boost_COMPILE_DEFINITIONS "BOOST_USE_STATIC_LIBS")
set(boost_COMPILE_OPTIONS_LIST "" "")
set(boost_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(boost_LIBRARIES "") # Will be filled later
set(boost_LIBS "") # Same as boost_LIBRARIES

mark_as_advanced(boost_INCLUDE_DIRS
                 boost_INCLUDES
                 boost_DEFINITIONS
                 boost_LINKER_FLAGS_LIST
                 boost_COMPILE_DEFINITIONS
                 boost_COMPILE_OPTIONS_LIST
                 boost_LIBRARIES
                 boost_LIBS
                 boost_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to boost_LIBS and boost_LIBRARY_LIST
set(boost_LIBRARY_LIST boost_wave boost_container boost_contract boost_exception boost_graph boost_iostreams boost_locale boost_log boost_program_options boost_random boost_regex boost_serialization boost_wserialization boost_coroutine boost_fiber boost_context boost_timer boost_thread boost_chrono boost_date_time boost_atomic boost_filesystem boost_system boost_type_erasure boost_log_setup boost_math_c99 boost_math_c99f boost_math_c99l boost_math_tr1 boost_math_tr1f boost_math_tr1l boost_stacktrace_addr2line boost_stacktrace_basic boost_stacktrace_noop boost_unit_test_framework pthread)
set(boost_LIB_DIRS "/home/alex/.conan/data/boost/1.69.0/conan/stable/package/8915d64f08339c2b87440ecfa3ccd7cb2da2edf1/lib")
foreach(_LIBRARY_NAME ${boost_LIBRARY_LIST})
    unset(CONAN_FOUND_LIBRARY CACHE)
    find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${boost_LIB_DIRS}
                 NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(CONAN_FOUND_LIBRARY)
        list(APPEND boost_LIBRARIES ${CONAN_FOUND_LIBRARY})
        if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
            # Create a micro-target for each lib/a found
            set(_LIB_NAME CONAN_LIB::boost_${_LIBRARY_NAME})
            if(NOT TARGET ${_LIB_NAME})
                # Create a micro-target for each lib/a found
                add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
            else()
                message(STATUS "Skipping already existing target: ${_LIB_NAME}")
            endif()
            list(APPEND boost_LIBRARIES_TARGETS ${_LIB_NAME})
        endif()
        message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
    else()
        message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
        list(APPEND boost_LIBRARIES_TARGETS ${_LIBRARY_NAME})
        list(APPEND boost_LIBRARIES ${_LIBRARY_NAME})
    endif()
endforeach()
set(boost_LIBS ${boost_LIBRARIES})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET boost::boost)
        add_library(boost::boost INTERFACE IMPORTED)
        
    if(boost_INCLUDE_DIRS)
      set_target_properties(boost::boost PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${boost_INCLUDE_DIRS}")
    endif()
    set_property(TARGET boost::boost PROPERTY INTERFACE_LINK_LIBRARIES ${boost_LIBRARIES_TARGETS} "${boost_LINKER_FLAGS_LIST}")
    set_property(TARGET boost::boost PROPERTY INTERFACE_COMPILE_DEFINITIONS ${boost_COMPILE_DEFINITIONS})
    set_property(TARGET boost::boost PROPERTY INTERFACE_COMPILE_OPTIONS "${boost_COMPILE_OPTIONS_LIST}")

            
    # Library dependencies
    include(CMakeFindDependencyMacro)
    find_dependency(zlib REQUIRED)
    get_target_property(tmp zlib::zlib INTERFACE_LINK_LIBRARIES)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_LINK_LIBRARIES ${tmp})
    endif()
    get_target_property(tmp zlib::zlib INTERFACE_COMPILE_DEFINITIONS)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ${tmp})
    endif()
    get_target_property(tmp zlib::zlib INTERFACE_INCLUDE_DIRECTORIES)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${tmp})
    endif()
    find_dependency(bzip2 REQUIRED)
    get_target_property(tmp bzip2::bzip2 INTERFACE_LINK_LIBRARIES)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_LINK_LIBRARIES ${tmp})
    endif()
    get_target_property(tmp bzip2::bzip2 INTERFACE_COMPILE_DEFINITIONS)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ${tmp})
    endif()
    get_target_property(tmp bzip2::bzip2 INTERFACE_INCLUDE_DIRECTORIES)
    if(tmp)
      set_property(TARGET boost::boost APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${tmp})
    endif()
    endif()
endif()
